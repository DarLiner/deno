import("//third_party/v8/gni/v8.gni")
import("//third_party/v8/snapshot_toolchain.gni")
import("//third_party/flatbuffers/flatbuffer.gni")
import("//third_party/flatbuffers/ts_flatbuffer.gni")
import("deno.gni")
import("rust.gni")

config("deno_config") {
  include_dirs = [ "third_party/v8" ]  # This allows us to v8/src/base/ libraries.
  configs = [ "third_party/v8:external_config" ]
}

rust_executable("deno") {
  source_root = "src/main.rs"
  rust_deps = [ ":libc" ]
  deps = [
    ":libdeno",
  ]
}

rust_library("libc") {
  source_root = "third_party/rust_crates/libc/src/lib.rs"
  cfg = [
    "feature=\"default\"",
    "feature=\"use_std\"",
  ]
}

executable("deno_cc") {
  sources = [
    "src/main.cc",
  ]
  deps = [
    ":flatbufferjs",
    ":libdeno",
    ":msg_cpp",
  ]
  configs += [ ":deno_config" ]
}

executable("mock_runtime_test") {
  testonly = true
  sources = [
    "src/file_util_test.cc",
    "src/from_snapshot.cc",
    "src/mock_runtime_test.cc",
  ]
  deps = [
    ":create_snapshot_mock_runtime",
    ":deno_nosnapshot",
    "//testing/gtest:gtest",
  ]
  defines = [ "DENO_MOCK_RUNTIME" ]
  configs += [ ":deno_config" ]
}

static_library("libdeno") {
  complete_static_lib = true
  sources = [
    "src/from_snapshot.cc",
  ]
  deps = [
    ":create_snapshot_deno",
    ":deno_nosnapshot",
  ]
  configs += [ ":deno_config" ]
}

v8_source_set("deno_nosnapshot") {
  sources = [
    "src/deno.cc",
    "src/deno_internal.h",
    "src/file_util.cc",
    "src/file_util.h",
    "src/include/deno.h",
  ]
  deps = [
    "third_party/v8:v8_monolith",
  ]
  configs = [ ":deno_config" ]
}

executable("snapshot_creator") {
  sources = [
    "src/snapshot_creator.cc",
  ]
  deps = [
    ":deno_nosnapshot",
  ]
  configs += [ ":deno_config" ]
}

flatbuffer("msg_cpp") {
  sources = [
    "src/msg.fbs",
  ]
}

run_node("bundle") {
  out_dir = "$target_gen_dir/bundle/"
  sources = [
    "js/main.ts",
    "js/msg_generated.ts",
    "js/package.json",  # The `browserslist` field controls Babel behavior.
  ]
  outputs = [
    out_dir + "main.js",
  ]
  deps = [
    ":flatbufferjs",
    ":run_tsc",
  ]
  args = [
    "./node_modules/parcel-bundler/bin/cli.js",
    "build",
    "--no-minify",
    "--out-dir",
    rebase_path(out_dir, root_build_dir),
    rebase_path("js/main.ts", root_build_dir),
  ]
}

# Due to bugs in Parcel we must run TSC independently in order to catch errors.
# https://github.com/parcel-bundler/parcel/issues/954
run_node("run_tsc") {
  main = "js/main.ts"
  tsconfig = "tsconfig.json"
  out_dir = "$target_gen_dir/tsc_dist/"
  sources = [
    "js/msg_generated.ts",
    main,
    tsconfig,
  ]
  outputs = [
    out_dir + "/main.js",
  ]
  deps = [
    ":flatbufferjs",
  ]
  args = [
    "./node_modules/typescript/bin/tsc",
    "--project",
    rebase_path(tsconfig, root_build_dir),
    "--outDir",
    rebase_path(out_dir, root_build_dir),
  ]
}

# Generates flatbuffer TypeScript code.
# TODO(ry) Ideally flatc output files should be written into
# target_gen_dir, but its difficult to get this working in a way that the
# bundler can resolve their location. (The bundler does not support NODE_PATH?)
# Therefore this hack: write the msg_generated.ts output
# into the js/ folder, and we check it into the repo. Hopefully this hack can
# be removed at some point. If msg.fps is changed, commit changes to the
# generated JS files. The stamp file is just to make gn work.
action("flatbufferjs") {
  script = "js/flatbufferjs_hack.py"
  sources = [
    "src/msg.fbs",
  ]
  outputs = [
    "$target_gen_dir/flatbufferjs_hack.stamp",
  ]

  args = [
    rebase_path("$target_gen_dir/msg_generated.ts", root_build_dir),
    rebase_path("js/msg_generated.ts", root_build_dir),
    rebase_path(outputs[0], root_build_dir),
  ]

  deps = [
    ":msg_ts",
  ]
}

ts_flatbuffer("msg_ts") {
  sources = [
    "src/msg.fbs",
  ]
}

# Generates $target_gen_dir/snapshot_deno.cc
create_snapshot("deno") {
  js = "$target_gen_dir/bundle/main.js"
  deps = [
    ":bundle",
  ]
}

# Generates $target_gen_dir/snapshot_mock_runtime.cc
create_snapshot("mock_runtime") {
  testonly = true
  js = "js/mock_runtime.js"
  deps = []
}
